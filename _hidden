#!/usr/bin/env python
# -*- coding: utf-8 -*-
#  
#  Copyright 2018 James <James.limeixin@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#

import os
import readline
import sys
import termios
import xml.etree.ElementTree as ET
import datetime
import signal
import ConfigParser
import subprocess
import hashlib


######
# This variable can set value in config file
# But need not delete it in here.
######
PROMPT = "hidden>"
TIMEOUT_PASSWD = 10
CMD_SPECIAL_CHAR = "-_|/. "
CMD_MAX_LEN = 128
HISTORY_MAX = 10

####
# global variable
####
INI_FILE = "./hidden.ini"
#
#
INI_SECTION_CMDFILE = "cmdfile"
INI_OPTION_CMDFILE = "cmd_help_file"
INI_SECTION_CFG = "programcfg"
INI_OPTION_PASSTIMEOUT = "input_password_timeout"
INI_OPTION_PROMPT = "prompt"
INI_OPTION_HISTORY = "history_line_max"
INI_SECTION_SECURITY = "security"
INI_OPTION_AUTH = "auth"
term_original = None
xml_root = None
######

#keyboard shortcuts
CTRL_A = 1
CTRL_E = 5
CTRL_N = 14
CTRL_P = 16
KEY_DEL = 127

def getpasswd(prompt="Password: "):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    new[3] = new[3] & ~termios.ECHO
    try:
        termios.tcsetattr(fd, termios.TCSADRAIN, new)
        passwd = raw_input(prompt)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
    return passwd


def getpasswd_from_ini_file():
    global INI_FILE
    try:
        cfg = ConfigParser.ConfigParser()
        cfg.read(INI_FILE)
        if (cfg.has_section(INI_SECTION_SECURITY) and 
            cfg.has_option(INI_SECTION_SECURITY, INI_OPTION_AUTH)):
            passwd = cfg.get(INI_SECTION_SECURITY, INI_OPTION_AUTH)
            if '' != passwd:
                return passwd
        return

    except Exception, e: #IOError:
        print "read config file failed.", str(e)
        return


def setpasswd_to_ini_file(passwd):
    global INI_FILE

    md5w = hashlib.md5()
    md5w.update(passwd)
    md5v = md5w.hexdigest()
    try:
        cfg = ConfigParser.ConfigParser()
        cfg.read(INI_FILE)
        if not cfg.has_section(INI_SECTION_SECURITY):
            cfg.add_section(INI_SECTION_SECURITY)
        cfg.set(INI_SECTION_SECURITY, INI_OPTION_AUTH, md5v)

        #should write in tmp file,
        #then delete ini file, and rename tmp to ini file.
        #cfg.write(open(INI_FILE+".bak", 'w'))
        cfg.write(open(INI_FILE, 'w'))
        return

    except Exception, e: #IOError:
        print str(e)
        return


def is_passwd_valid(password):
    #use user set password if it exist.
    pwd_md5 = getpasswd_from_ini_file()
    if pwd_md5 != None:
        md5i = hashlib.md5()
        md5i.update(password)
        if md5i.hexdigest() == pwd_md5:
            return True

    #default password
    else:
        i = datetime.datetime.now()
        if password == str(i.year + i.month * 100 + i.day):
            return True

    return False


def alarm_handler(signum, frame):
    raise KeyboardInterrupt


def user_authentication():
    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(TIMEOUT_PASSWD)
    try:
        password = getpasswd()
    except KeyboardInterrupt:
        print("Timeout")
        sys.exit()
    else:
        signal.alarm(0)
        print('')

        #check password
        if is_passwd_valid(password):
            return

        #input password wrong.
        sys.exit()


##
## should not enable more than once
##
def term_set_canonical(enable):
    global term_original
    fd = sys.stdin.fileno()
    if  1 == enable:
        term_original = termios.tcgetattr(fd)
        new = term_original[:]
        new[3] = new[3] & ~(termios.ECHO | termios.ICANON)
        termios.tcsetattr(fd, termios.TCSADRAIN, new);
    else:
        termios.tcsetattr(fd, termios.TCSADRAIN, term_original)


def change_password():
    term_set_canonical(0)
    try:
        old_pwd = getpasswd(prompt="Old password:")
        print('')
        if is_passwd_valid(old_pwd):
            new_pwd = getpasswd(prompt="New password:")
            print('')
            new_pwd2 = getpasswd(prompt="Retype new password:")
            print('')
            if (new_pwd == new_pwd2):
                setpasswd_to_ini_file(new_pwd)
                print('passwd: authentication updated successfully.')
            else:
                print('passwd: different between twice input.')
        else:
            print('passwd: authentication failed.')

    finally:
        term_set_canonical(1)


#ch only 1 char
def is_cli_char(ch):
    if (ch.isalnum() or (ch in CMD_SPECIAL_CHAR)):
        return True
    return False


def exec_cli(node, cli):
    if cli == "quit":
        sys.exit()
    elif cli == "passwd":
        change_password()
    else:
        exec_str = ''
        if node.text:
            if node.get('replace') == 'True':
                exec_str = node.text
            else:
                exec_str = node.text + ' ' + cli
        else:
            exec_str = cli

        subprocess.call(exec_str, shell=True)


def print_node(fdw, node):
    name = node.get('name')
    help = node.get('help')
    if name:
        os.write(fdw, name.ljust(18))
        if help:
            os.write(fdw, '-' + help)
        os.write(fdw, '\n')


def print_all_child(fdw, node):
    for i in node.getchildren():
        print_node(fdw, i)


def is_param_match(cmdkey, ptype):
    return True


##
#notice:
# 1. if want support Incomplete matching, can use:
#    node.get('name').startswith(cmdkey)
# 2. if want support complete matching only, can use:
#    node.get('name') == cmdkey
def is_match(cmdkey, node):
    if node.tag == "COMMAND" and node.get('name').startswith(cmdkey):
#    if node.tag == "COMMAND" and node.get('name') == cmdkey:
        return True
    if node.tag == "PARAM" and is_param_match(cmdkey, node.get('ptype')):
        return True
    return False


#callback for walk_tree
#level start from 1
g_match_nodes = []  #init it in path_tail_nodes
g_match_depth = 0
def match_cb(node, level, cmdlist):
    #level must start from 1, and cmdlist can not empty
    global g_match_nodes
    global g_match_depth

    if is_match(cmdlist[level-1], node):
        if len(cmdlist) == level:
            g_match_nodes.append(node)

        #only for '\n' process
        if g_match_depth < level:
            g_match_depth = level

        return True
    else:
        return False


#notice: len(cmdlist) must > 0
#level must start from 1
def walk_tree(root, level, cb, cmdlist):
    children = root.getchildren()
    if len(children) == 0 or level > len(cmdlist):
        return
    for child in children:
        if True == cb(child, level, cmdlist):
            walk_tree(child, level + 1, cb, cmdlist)
    return


def path_tail_nodes(cmdlist):
    global g_match_nodes
    global g_match_depth
    g_match_nodes = []
    g_match_depth = 0

    if 0 == len(cmdlist):
        g_match_nodes.append(xml_root)
    else:
        walk_tree(xml_root, 1, match_cb, cmdlist)
    return g_match_nodes


def cmd_help_print(fdw, str):
    if len(str) == 0:
        print_all_child(fdw, xml_root)

    elif str[-1] == ' ':
        have_action = False
        cmdlist = str.strip().split()
        nodes = path_tail_nodes(cmdlist)
        for n in nodes:
            for i in n.getchildren():
                print_node(fdw, i)
                if i.tag == "ACTION":
                    have_action = True
        if have_action:
            os.write(fdw, '<LF>\n')

    else:
        cmdlist = str.strip().split()
        list_1 = cmdlist[:-1]
        nodes = path_tail_nodes(list_1)
        for n in nodes:
            for n_curr in n.getchildren():
                if ((n_curr.tag == "COMMAND" and n_curr.get('name').startswith(cmdlist[-1])) or 
                    (n_curr.tag == "PARAM")):
                    print_node(fdw, n_curr)


def is_match_token(token, node):
    if len(token) == 0:
        return True
    else:
        if (node.tag == "COMMAND" and (not node.get('name').startswith(token))):
            return False
        else:
            return True


def cmd_table_try_complete(fdw, str):
    nodes = []
    tns = []
    token = ''
    if len(str) == 0:
        return nodes

    cmdlist = str.strip().split()
    if str[-1] == ' ':
        nodes = path_tail_nodes(cmdlist)
    else:
        token = cmdlist[-1]
        nodes = path_tail_nodes(cmdlist[:-1])

    for lastnode in nodes:
        for tn in lastnode.getchildren():
            if is_match_token(token, tn):
                tns.append(tn)
    return tns


def match_depth_len_for_keys(cmdline, depth):
    i = 0
    length = 0
    keys = 0
    cmdlen = len(cmdline)
    while keys < depth:
        while i < cmdlen and cmdline[i] == ' ':
            i += 1
            length += 1

        if i < cmdlen and cmdline[i] != ' ':
            keys += 1
            while i < cmdlen and cmdline[i] != ' ':
                i += 1
                length += 1
    return length


#-------------------- begain for complete cmdlist -------------------
g_cmdlist_complete = []
def path_end(root, action_node, level, keys_num):
    if level < keys_num:
        return False
    for node in root.getchildren():
        if (level == keys_num) and (node is action_node): # and (node.tag == "ACTION")
            return True
 
    return False
    
def path_walk(root, action_node, level, keys_num):
    global g_cmdlist_complete

    if (level > keys_num) or (len(root.getchildren()) == 0):
        return False
    if level > 0 and (root.tag == "COMMAND" and 
        ( not (root.get('name').startswith(g_cmdlist_complete[level-1])))):
        return False

    if path_end(root, action_node, level, keys_num):
        return True

    if level == keys_num: #walked all keys, but not path_end, need not check more.
        return False

    ret0 = False
    for node in root.getchildren():
        if (node.tag == "COMMAND" and 
            ( not (node.get('name').startswith(g_cmdlist_complete[level])))):
            continue
        
        ret = path_walk(node, action_node, level + 1, keys_num)
        if ret:
            ret0 = True
            if node.tag == "COMMAND":
                g_cmdlist_complete[level] = node.get('name')

    return ret0


def cmdlist_complete(action_node, cmdlist):
    global g_cmdlist_complete
    g_cmdlist_complete = cmdlist[:]
    keys_num = len(cmdlist)
    path_walk(xml_root, action_node, 0, keys_num)

#-------------------- end for complete cmdlist -------------------


def run_cmd():
    fdw = sys.stdout.fileno()
    os.write(fdw, PROMPT)

    #define variable
    currline = []
    history_position = 0
    history = []
    last_position = 0  #cursor position

    while True:
        ch = os.read(sys.stdin.fileno(), 1)

        # 1. Control key
        #if '^[' == ch:
        if ord(ch) == 27:
            ch = os.read(sys.stdin.fileno(), 1)
            #if '[' == ch:
            if ord(ch) == 91:
                ch = os.read(sys.stdin.fileno(), 1)

                # UP_ARROW
                if 'A' == ch:
                    if 0 == history_position: #no history more
                        os.write(fdw, '\a') #use bell
                    else:
                        history_position -= 1
                        os.write(fdw, '\r' + ' ' * (len(currline) + len(PROMPT)) + '\r') #cover up old line
                        os.write(fdw, PROMPT)
                        os.write(fdw, history[history_position]) #display select history line
                        currline = list(history[history_position])
                        last_position = len(currline)

                # DOWN_ARROW
                elif 'B' == ch:
                    if len(history) == history_position: #no history more
                        os.write(fdw, '\a') #use bell
                    else:
                        os.write(fdw, '\r' + ' ' * (len(currline) + len(PROMPT)) + '\r') #cover up old line
                        os.write(fdw, PROMPT)
                        os.write(fdw, history[history_position]) #display select history line
                        currline = list(history[history_position])
                        last_position = len(currline)
                        history_position += 1

                # RIGHT_ARROW
                elif 'C' == ch:
                    if len(currline) == last_position:
                        os.write(fdw, '\a') #use bell
                    else:
                        os.write(fdw, currline[last_position])
                        last_position += 1

                # LEFT_ARROW
                elif 'D' == ch:
                    if 0 == last_position:  #no left more.
                        os.write(fdw, '\a') #use bell
                    else:
                        os.write(fdw, '\b')
                        last_position -= 1

                # other ctl key ignore
                else:
                    os.write(fdw, '\a') #use bell
        # 2. Entry
        elif '\n' == ch:
            os.write(fdw, '\n')

            #record to history, except empty line.
            if len(currline) != 0:
                history.append(''.join(currline))
                history_position = len(history)

                #clear old history record line
                if len(history) == HISTORY_MAX:
                    del(history[0])
                    history_position -= 1

                #clear currline char
                currline = []
                last_position = 0

                #execute cli program
                action_node = None
                action_node_num = 0
                cmdlist = history[-1].strip().split() #split(' ') no args ' ' can process multp whitespace.
                childs = path_tail_nodes(cmdlist)
                for child in childs:
                    for node in child.getchildren():
                        if node.tag == "ACTION":
                            action_node_num += 1
                            action_node = node
                if action_node_num != 1:
                    #first error key position
                    e_len = match_depth_len_for_keys(history[-1], g_match_depth)
                    while len(history[-1]) > e_len and history[-1][e_len] == ' ':
                        e_len += 1
                    os.write(fdw, (' ' * (len(PROMPT) + e_len)) + '^\n')

                    if action_node_num < 1:
                        os.write(fdw, "Error: No such command.\n")
                    else:
                        os.write(fdw, "Error: Input command match with non-uniqueness.\n")
                else:
                    #ok, input command line is valid
                    #complete the input command keys, into g_cmdlist_complete
                    cmdlist_complete(action_node, cmdlist)
                    #---------------------------------
                    # Warning:
                    # 1. 
                    # if support incomplete match for input keys, then can not differentiate some:
                    # for example: 1) show key   2)show keyboard
                    # while input 'show key' command, then, can not know you want 'show key' or 'show keyboard'
                    # 2.
                    # if want not support incomplete match:
                    # delete call cmdlist_complete(action_node, cmdlist)
                    # and call exec_cli(action_node, history[-1].strip())
                    #---------------------------------

                    #ok, exec command line
                    exec_cli(action_node, ' '.join(g_cmdlist_complete))

            #echo prompt
            os.write(fdw, PROMPT)

        # 3. Help key
        elif '?' == ch:
            os.write(fdw, '?\n')
            cmd_help_print(fdw, ''.join(currline).lstrip())
            os.write(fdw, PROMPT)
            os.write(fdw, ''.join(currline))

        # 4. Table key
        elif '\t' == ch:
            tns = cmd_table_try_complete(fdw, ''.join(currline).lstrip())
            tns_len = len(tns)
            if tns_len == 0:
                pass
            elif tns_len == 1 and tns[0].tag == "COMMAND":
                    tn_name = tns[0].get('name')
                    tn_name_len = len(tn_name)
                    if tn_name_len > 0:
                        if currline[-1] == ' ':
                            os.write(fdw, tn_name)
                            currline = currline[:] + list(tn_name)
                            last_position = last_position + tn_name_len
                        else:
                            tokenlist = ''.join(currline).split()
                            token = tokenlist[-1]
                            tokenlen = len(token)
                            outstr = tn_name[tokenlen:]
                            if len(outstr) == 0:
                                outstr = ' '
                            os.write(fdw, outstr)
                            currline = currline[:] + list(outstr)
                            last_position = last_position + len(outstr)
                    else:
                        pass
            else:
                have_action = False
                os.write(fdw, '\n')
                for tnode in tns:
                    print_node(fdw, tnode)
                    if tnode.tag == "ACTION":
                        have_action = True
                if have_action:
                    os.write(fdw, '<LF>\n')
                os.write(fdw, PROMPT)
                os.write(fdw, ''.join(currline))

        # 5. Backspace
        elif '\b' == ch:
            #delete char
            if last_position > 0:
                last_position -= 1
                del(currline[last_position])

                #delete screen
                if len(currline) == last_position:
                    os.write(fdw, '\b \b')
                else:
                    os.write(fdw, '\b')
                    os.write(fdw, ''.join(currline[last_position:]))
                    os.write(fdw, ' \b') #cover up last char space
                    os.write(fdw, '\b' * len(currline[last_position:]))
            else:
                os.write(fdw, '\a') #use bell

        # 6. CLI char
        elif is_cli_char(ch):
            if len(currline) >= CMD_MAX_LEN :
                os.write(fdw, '\a') #use bell
            else:
                currline.insert(last_position, ch)
                last_position += 1

                #cursor at tail
                if len(currline) == last_position :
                    os.write(fdw, ch)
                #cursor not at tail
                else:
                    os.write(fdw, ''.join(currline[last_position-1:]))
                    os.write(fdw, '\b' * len(currline[last_position:]))

        # 7. Other char
        else:
            #keyboard shortcuts
            if ord(ch) == KEY_DEL:
                pass
            elif ord(ch) == CTRL_A:
                pass
            else:
                #ignore other char
                os.write(fdw, '\a')


def ini_file_exist():
    global INI_FILE

    #find INI file
    if os.path.exists(r'./hidden.ini'):
        INI_FILE = r'./hidden.ini'
    elif os.path.exists(r'~/hidden.ini'):
        INI_FILE = r'~/hidden.ini'
    elif os.path.exists(r'/etc/hidden/hidden.ini'):
        INI_FILE = r'/etc/hidden/hidden.ini'
    elif os.path.exists(r'/etc/hidden.ini'):
        INI_FILE = r'/etc/hidden.ini'
    elif os.path.exists(r'/etc/sysconfig/hidden.ini'):
        INI_FILE = r'/etc/sysconfig/hidden.ini'
    else:
        return False

    return True


def env_check():
    if os.name != 'posix':
        print("Please run this in posix OS, for example: Linux.")
        sys.exit()
    if (sys.version_info[0] != 2) or (sys.version_info[1] != 7):
        print("Program environment need 2.7, other env has not test.")
        sys.exit()
    if not ini_file_exist():
        print "Error: Can not find ini file for configuration."
        sys.exit()


def main():
    term_set_canonical(1)
    try:
        run_cmd()
    except KeyboardInterrupt:
        return  #need ignore
    finally:
        term_set_canonical(0)


def init_config():
    global INI_FILE
    global PROMPT
    global TIMEOUT_PASSWD
    global HISTORY_MAX
    global xml_root

    try:
        cfg = ConfigParser.ConfigParser()
        cfg.read(INI_FILE)
        # read config from ini file, if not exist then use default config.
        if cfg.has_section(INI_SECTION_CFG):
            if cfg.has_option(INI_SECTION_CFG, INI_OPTION_PROMPT):
                tmp = cfg.get(INI_SECTION_CFG, INI_OPTION_PROMPT)
                if len(tmp) > 0:
                    PROMPT = tmp
            if cfg.has_option(INI_SECTION_CFG, INI_OPTION_PASSTIMEOUT):
                timeo = cfg.get(INI_SECTION_CFG, INI_OPTION_PASSTIMEOUT)
                if len(timeo) > 0 and timeo.isdigit():
                    TIMEOUT_PASSWD = int(timeo)
            if cfg.has_option(INI_SECTION_CFG, INI_OPTION_HISTORY):
                h_max = cfg.get(INI_SECTION_CFG, INI_OPTION_HISTORY)
                if len(h_max) > 0 and h_max.isdigit():
                    HISTORY_MAX = int(h_max)

        # read xml command file. if not exist then means no command, so exit program.
        if cfg.has_section(INI_SECTION_CMDFILE):
            if cfg.has_option(INI_SECTION_CMDFILE, INI_OPTION_CMDFILE):
                cmdfile = cfg.get(INI_SECTION_CMDFILE, INI_OPTION_CMDFILE)
                if len(cmdfile) > 0:
                    tree = ET.parse(cmdfile)
                    xml_root = tree.getroot()
                else:
                    sys.exit()
            else:
                sys.exit()
        else:
            sys.exit()

    except Exception, e: #IOError:
        print "read config file failed."
        print str(e)
        sys.exit()


if __name__ == '__main__':
    env_check()
    user_authentication()
    init_config()
    main()

